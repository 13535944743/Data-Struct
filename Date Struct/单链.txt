typedef struct LNode {
    int data;
    struct LNode *next;
}LNode, *LinkList;
void CreateList(LinkList &L, int n)
{
    L = (LinkList)malloc(sizeof(LNode) );
    L->next = NULL;
    for(int i = n; i > 0; i--) {
        LinkList p = (LinkList)malloc(sizeof(LNode));
        scanf("%d", &p->data);
        p->next = L->next;
        L->next = p;
    }
}

int GetElem(LinkList L, int i, int e)
{
    LinkList p = L->next;
    int j = 1;
    while(p && j < i) {
        p = p->next;
        j++;
    }
    if(!p || j > i)     return error;
    e = p->data;
    return ok;
}

int ListInsert(LinkList &L, int i, int e)
{
    LinkList p = L;
    int j = 0;
    while(p && j < i - 1) {
        p = p->next;
        j++;
    }
    if(!p || j >i - 1)  return error;
    LinkList s = (LinkList)malloc( sizeof(LNode) );
    s->data = e; s->next = p->next;
    p->next = s;
    return ok;
}
int ListDelete(LinkList &L, int i, int e)
{
    LinkList p = L;
    int j = 0;
    while(p->next && j < i - 1) {
        p = p->next;
        j++;
    }
    if(!(p->next) || j > i - 1) return error;
    LinkList q = p->next;
    p->next = q->next;
    e = q->data;
    free(q);
}
void MergeList(LinkList &la, LinkList &lb, LinkList &lc)
{
    LinkList pa = la->next;
    LinkList pb = lb->next;

    LinkList pc = la;
    lc = pc;

    while(pa && pb) {
        if(pa->data <= pb->data) {
            pc->next = pa;
            pc = pa;
            pa = pa->next;
        }
        else {
            pc->next = pb;
            pc = pb;
            pb = pb->next;
        }
    }
    pc->next = pa ? pa : pb;
    free(lb);
}




